// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  includeRelationFromFields = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  email         String         @unique @db.VarChar(256)
  phone         String?        @unique @db.VarChar(32)
  firstName     String         @db.VarChar(256)
  lastName      String         @db.VarChar(256)
  avatar        String?        @db.VarChar(2048)
  role          Role           @default(USER)
  settings      UserSettings?
  refreshTokens RefreshToken[]
  address       Address?
  socialMedia   SocialMedia[]
  ownProducts   Product[]      @relation("ownProducts")
  wonProducts   Product[]      @relation("wonProducts")
  orders        Order[]
  bids          Bid[]
  chats         ChatMember[]
  messages      Message[]
  createdAt     DateTime       @default(now())
  passwordHash  String         @db.VarChar(256)
  phoneVerified Boolean        @default(false)
  emailVerified Boolean        @default(false)
  updatedAt     DateTime       @updatedAt
  favoriteProducts  FavoriteProducts[]
}

model UserSettings {
  id                       String     @id @default(uuid()) @db.Uuid
  language                 Languages? @default(UA)
  theme                    Themes?    @default(LIGHT)
  enableEmailNotifications Boolean?   @default(true)
  user                     User       @relation(fields: [userId], references: [id])
  userId                   String     @unique @db.Uuid
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
}

model Address {
  id            String   @id @default(uuid()) @db.Uuid
  country       String?  @db.VarChar(256)
  region        String?  @db.VarChar(512)
  city          String?  @db.VarChar(512)
  address       String?  @db.VarChar(1024)
  zip           String?  @db.VarChar(32)
  deliveryData  String?  @db.VarChar(1024)
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?  @unique @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SocialMedia {
  id               String          @id @default(uuid()) @db.Uuid
  socialMedia      SocialMediaType
  link             String          @db.VarChar(2048)
  user             User?           @relation(fields: [ownedByUserId], references: [id])
  ownedByUserId    String?         @db.Uuid
  product          Product?        @relation(fields: [ownedByProductId], references: [id])
  ownedByProductId String?         @db.Uuid
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Category {
  id        String    @id @default(uuid()) @db.Uuid
  title     String    @db.VarChar(512)
  products  Product[]
  createdAt DateTime  @default(now())
  image     String?   @db.VarChar(2048) @default("")
  updatedAt DateTime  @updatedAt

  @@unique([title])
}

model Product {
  id              String        @id @default(uuid()) @db.Uuid
  title           String        @db.VarChar(512)
  description     String
  price           Decimal       @db.Money
  recommendedPrice Decimal?     @db.Money
  minimalBid      Decimal?      @db.Money
  imageLinks      String[]      @db.VarChar(2048)
  country         String?        @db.VarChar(512)
  city            String?       @db.VarChar(512)
  phone           String?       @db.VarChar(32)
  type            ProductType
  status          ProductStatus
  condition       Condition     @default(NEW)
  endDate         DateTime?
  postDate        DateTime?
  cancelReason   String?
  author          User          @relation(name: "ownProducts", fields: [authorId], references: [id])
  authorId        String        @db.Uuid
  category        Category?     @relation(fields: [categoryId], references: [id])
  categoryId      String?       @db.Uuid
  winner          User?         @relation(name: "wonProducts", fields: [winnerId], references: [id])
  winnerId        String?       @db.Uuid
  socialMedia     SocialMedia[]
  bids            Bid[]
  orders          Order[]
  chat            Chat?
  views           Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  inFavorites     FavoriteProducts[]
  participantsNotified  Boolean @default(false)
}

model Bid {
  id        String   @id @default(uuid()) @db.Uuid
  bidder    User     @relation(fields: [bidderId], references: [id])
  bidderId  String   @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.Uuid
  price     Decimal  @db.Money
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @db.Timestamp(0)
}

model Order {
  id        String   @id @default(uuid()) @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.Uuid
  buyer     User     @relation(fields: [buyerId], references: [id])
  buyerId   String   @db.Uuid
  cost      Decimal  @db.Money
  status    OrderStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        String       @id @default(uuid()) @db.Uuid
  title     String       @db.VarChar(256)
  product   Product      @relation(fields: [productId], references: [id])
  productId String       @unique @db.Uuid
  members   ChatMember[]
  messages  Message[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?    @default(now())
}

model ChatMember {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String   @db.Uuid
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.Uuid
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  token     String
  expiresAt DateTime @db.Timestamp
}

model News {
  id          String     @id @default(uuid()) @db.Uuid
  title       String
  content     String
  description String
  image       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model FavoriteProducts {
  userId      String  @db.Uuid
  user        User    @relation(fields: [userId], references: [id])
  productId   String  @db.Uuid
  product     Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

enum Role {
  USER
  ADMIN
}

enum Themes {
  LIGHT
  DARK
}

enum Languages {
  EN
  UA
}

enum ProductType {
  AUCTION
  SELLING
}

enum ProductStatus {
  CREATED
  ACTIVE
  CANCELLED
  FINISHED
  CLOSED
  DRAFT
}

enum SocialMediaType {
  FACEBOOK
  WEBSITE
  INSTAGRAM
  LINKEDIN
}

enum Condition {
  NEW
  USED
}

enum OrderStatus {
  CREATED
  PAID
  DELIVERED
  CANCELLED
}
