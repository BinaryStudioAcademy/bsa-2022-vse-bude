// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

model User {
  id                          String        @id @db.Uuid
  firebaseUid                 String
  email                       String        @unique @db.VarChar(256)
  phone                       String        @unique @db.VarChar(32)
  firstName                   String        @db.VarChar(256)
  lastName                    String        @db.VarChar(256)
  avatar                      String?       @db.VarChar(2048)
  role                        Role          @default(USER)
  settings                    UserSettings?
  address                     Address?
  socialMedia                 SocialMedia[]
  ownProducts                 Product[]     @relation("ownProducts")
  wonProducts                 Product[]     @relation("wonProducts")
  bids                        Bid[]
  chats                       ChatMember[]
  messages                    Message[]
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime?     @updatedAt
}

model UserSettings {
  id                          String        @id @db.Uuid
  language                    Languages?    @default(UA)
  theme                       Themes?       @default(LIGHT)
  enableEmailNotifications    Boolean?      @default(true)
  user                        User          @relation(fields: [userId], references: [id])
  userId                      String        @unique @db.Uuid
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
}

model Address {
  id                          String        @id @db.Uuid
  country	                    String?       @db.VarChar(256)
  region                      String?       @db.VarChar(512)
  city                        String?       @db.VarChar(512)
  address	                    String?       @db.VarChar(1024)
  zip                         String?       @db.VarChar(32)
  novaPoshtaRef               String?
  user                        User?         @relation(fields: [userId], references: [id])
  userId                      String?       @unique @db.Uuid
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
}

model SocialMedia {
  id	                        String        @id @db.Uuid
  socialMedia	                SocialMediaType
  link	                      String        @db.VarChar(2048)
  user                        User?         @relation(fields: [ownedByUserId], references: [id])
  ownedByUserId	              String?       @unique @db.Uuid
  product                     Product?      @relation(fields: [ownedByProductId], references: [id])
  ownedByProductId            String?       @unique @db.Uuid
  createdAt	                  DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
}

model Category {
  id                          String        @id @db.Uuid
  title                       String        @db.VarChar(512)
  products                    Product[]
  createdAt	                  DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
}

model Product {
  id                          String        @id @db.Uuid
  title                       String        @db.VarChar(512)
  description                 String
  price                       Decimal       @db.Money
  recomendedPrice             Decimal?      @db.Money
  minimalBid                  Decimal?      @db.Money
  imageLinks                  String[]      @db.VarChar(2048)
  city                        String?       @db.VarChar(512)
  type                        ProductType
  status                      ProductStatus
  endDate                     DateTime?
  cancellReason               String?
  author                      User          @relation(name: "ownProducts", fields: [authorId], references: [id])
  authorId                    String        @unique @db.Uuid
  category                    Category?     @relation(fields: [categoryId], references: [id])
  categoryId                  String?       @unique @db.Uuid
  winner                      User?         @relation(name: "wonProducts", fields: [winnerId], references: [id])
  winnerId                    String?       @unique @db.Uuid
  socialMedia                 SocialMedia[]
  bids                        Bid[]
  chat                        Chat?
  createdAt	                  DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
}

model Bid {
  id                          String        @id @db.Uuid
  bidder                      User          @relation(fields: [bidderId], references: [id])
  bidderId                    String        @unique @db.Uuid
  product                     Product       @relation(fields: [productId], references: [id])
  productId                   String        @unique @db.Uuid
  price                       Decimal       @db.Money
  createdAt	                  DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
}

model Chat {
  id	                        String        @id @db.Uuid
  title                       String        @db.VarChar(256)
  product                     Product       @relation(fields: [productId], references: [id])
  productId                   String        @unique @db.Uuid
  members                     ChatMember[]
  messages                    Message[]
  createdAt	                  DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  deletedAt                   DateTime?     @default(now())
}

model ChatMember {
  id	                        String        @id @db.Uuid
  user                        User          @relation(fields: [userId], references: [id])
  userId                      String        @unique @db.Uuid
  chat                        Chat          @relation(fields: [chatId], references: [id])
  chatId                      String        @unique @db.Uuid
  createdAt	                  DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
}

model Message {
  id	                        String        @id @db.Uuid
  sender                      User          @relation(fields: [senderId], references: [id])
  senderId                    String        @unique @db.Uuid
  chat                        Chat          @relation(fields: [chatId], references: [id])
  chatId                      String        @unique @db.Uuid
  text                        String
  createdAt	                  DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Themes {
  LIGHT
  DARK
}

enum Languages {
  EN
  UA
}

enum ProductType {
  AUCTION
  SELLING
}

enum ProductStatus {
  CREATED
  ACTIVE
  CANCELLED
  FINISHED
  CLOSED
  DRAFT
}

enum SocialMediaType {
  FACEBOOK
  WEBSITE
  INSTAGRAM
  LINKEDIN
}
